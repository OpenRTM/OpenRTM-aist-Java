<project name="OpenRTM-aist-Java" default="jar">

	<property name="version" value="2.0.1"/>
	<property name="short_ver" value="2.0"/>
	<property name="target.name" value="OpenRTM-aist-${version}"/>



	<property name="source" value="src"/>

	<property name="source.sdo" value="src/_SDOPackage"/>

	<property name="source.sdotemp" value="src/_SDOPackageTemp"/>

	<property name="source.rtc" value="src/RTC"/>

	<property name="source.rtctemp" value="src/RTCTemp"/>

	<property name="source.rtm" value="src/RTM"/>

	<property name="source.rtmtemp" value="src/RTMTemp"/>

	<property name="source.openrtm" value="src/OpenRTM"/>
	<property name="source.img" value="src/Img"/>
	<property name="source.jaraarm" value="src/JARA_ARM"/>

	<property name="source.openrtmtemp" value="src/OpenRTMTemp"/>

	<property name="source.examples" value="src/RTMExamples"/>
	<property name="source.examples.scripts" value="src/RTMExamples_scripts"/>

	<property name="source.extension" value="src/Extension"/>

	<property name="source.examplestemp" value="src/RTMExamplesTemp"/>

	<property name="source.main" value="src/jp"/>

	<property name="source.common" value="src/jp/go/aist/rtm"/>

	<property name="source.sunorb" value="src/jp/go/aist/ForSunOrb"/>

	<property name="source.jacorb" value="src/jp/go/aist/ForJacOrb"/>

	<property name="source.samples.class" value="bin/RTMExamples"/>

	<property name="source.samples.java" value="src/RTMExamples"/>

	<property name="source.samples.java.SimpleService" value="${source.samples.java}/SimpleService"/>

	<property name="source.samples.java.AutoTest" value="${source.samples.java}/AutoTest"/>

	<property name="source.test" value="tests/src"/>

	<property name="source.tests.bind" value="${source.test}/jp/go/aist/rtm/bind"/>

	<property name="source.rtcd" value="src/rtcd"/>

	<property name="source.rtcprof" value="src/rtcprof"/>


	<property name="dist.dir" value="jar" />

	<property name="build.dir" value="bin"/>

	<property name="build.dir.test" value="tests/bin"/>

	<property name="build.doc" value="docs/JavaDoc"/>

	<property name="build.doc.us" value="docs/JavaDocEn"/>

	<property name="build.dir.rtcd" value="bin/rtcd" />

	<property name="build.dir.prof" value="bin/rtcprof" />


	<property environment="env"/>


	<property name="idl.path" value="idl" />

	<property name="idl.path.tests" value="tests/idl" />

	<property name="idl.Manager" value="${idl.path}/Manager.idl" />

	<property name="idl.OpenRTM" value="${idl.path}/OpenRTM.idl" />

	<property name="idl.DataPort" value="${idl.path}/DataPort.idl" />

	<property name="idl.BasicDataType" value="${idl.path}/BasicDataType.idl" />

	<property name="idl.ExtendedDataTypes" value="${idl.path}/ExtendedDataTypes.idl" />

	<property name="idl.InterfaceDataTypes" value="${idl.path}/InterfaceDataTypes.idl" />

	<property name="idl.ComponentObserver" value="${idl.path}/ComponentObserver.idl" />

	<property name="idl.Logger" value="${idl.path}/Logger.idl" />

	<property name="idl.LogicalTimeTriggeredEC" value="${idl.path}/LogicalTimeTriggeredEC.idl" />
	
	<property name="idl.CameraCommonInterface" value="${idl.path}/CameraCommonInterface.idl" />
	<property name="idl.ManipulatorCommonInterface_Common" value="${idl.path}/ManipulatorCommonInterface_Common.idl" />
	<property name="idl.ManipulatorCommonInterface_DataTypes" value="${idl.path}/ManipulatorCommonInterface_DataTypes.idl" />
	<property name="idl.ManipulatorCommonInterface_Middle" value="${idl.path}/ManipulatorCommonInterface_Middle.idl" />
	<property name="idl.SharedMemory" value="${idl.path}/SharedMemory.idl" />
	<property name="idl.RTC_ComponentObserver" value="${idl.path}/fsm4rtc/ComponentObserver.idl" />
	<property name="idl.ExtendedFsmService" value="${idl.path}/fsm4rtc/ExtendedFsmService.idl" />
	<property name="idl.RTC_DataPort" value="${idl.path}/fsm4rtc/DataPort.idl" />

	<property name="idl.test.CorbaConsumer" value="${idl.path.tests}/CorbaConsumer/Hello.idl" />

	<property name="idl.test.CorbaPort" value="${idl.path.tests}/CorbaPort/MyService.idl" />

	<property name="idl.test.TypeCast" value="${idl.path.tests}/TypeCast/Mock.idl" />
	<property name="idl.sample" value="${source.samples.java}/MyService.idl" />

	<property name="idl.autotest" value="${source.samples.java}/AutoTestService.idl" />

	

	<property name="dir.jsmooth" value="${env.JSMOOTH_HOME}"/>
	<property name="util.source" value="util"/>



	<target name="buildAll">

	<taskdef name="jsmoothgen"
	classname="net.charabia.jsmoothgen.ant.JSmoothGen"
	classpath="${dir.jsmooth}/lib/jsmoothgen-ant.jar"/>
		<antcall target="idlCompile" />

		<antcall target="idlCompileEtc" />

		<antcall target="clean" />

		<antcall target="compile_win" />

		<antcall target="jar" />

		<antcall target="createExe" />

	</target>

	
        <target name="buildAllLinux">
		<antcall target="createVersionFile" />

		<antcall target="idlCompile" />

		<antcall target="idlCompileEtc" />

		<antcall target="clean" />

		<antcall target="compile" />

		<antcall target="jar" />

		<antcall target="javaDoc" />


	</target>

	
        <target name="buildAllAndroid">

		<antcall target="idlCompile" />

		<antcall target="idlCompileEtc" />

		<antcall target="clean" />

		<antcall target="compile_android" />

		<antcall target="jar" />

		<antcall target="javaDoc" />

	</target>


        <target name="buildTests">

		<antcall target="idlCompile" />

		<antcall target="idlCompileEtc" />

		<antcall target="clean" />

		<antcall target="compile" />

		<antcall target="jar" />

		<antcall target="compile_tests" />

		<antcall target="junit" />

	</target>



	<target name="jar" description="jarファイルを作成します">
		<mkdir dir="${dist.dir}" />
		<delete file="${dist.dir}/${target.name}.jar" />
		<jar destfile="${dist.dir}/${target.name}.jar"
			 basedir="${build.dir}"
			 excludes="RTMExamples/**, rtcd/**, rtcprof/**, Extension/**, OpenRTM/LogicalTimeTriggeredEC**" />
		
		<jar destfile="${dist.dir}/rtcd.jar"
			 basedir="${build.dir}"
			 includes="rtcd/**" />
		
		<jar destfile="${dist.dir}/rtcprof.jar"
			 basedir="${build.dir}"
                         manifest="${source.rtcprof}/META-INF/MANIFEST.MF"
			 includes="rtcprof/**" />
		
		<jar destfile="${dist.dir}/LogicalTimeTriggeredEC.jar"
			 basedir="${build.dir}"
			 includes="Extension/EC/logical_time/**, OpenRTM/LogicalTimeTriggeredEC**" />
		
		<jar destfile="${dist.dir}/NameserviceFile.jar"
			 basedir="${build.dir}"
			 includes="Extension/LocalService/nameservice_file/**" />
	</target>


	<target name="createExe" description="exeファイルを作成します">

		<delete file="rtcd.jsmooth" />

		<copy file="rtcd.jsmooth.in" tofile="rtcd.jsmooth"/>

		<replace file="rtcd.jsmooth" token="@version@" 
			value="${version}" />

		<taskdef name="jsmoothgen"
		classname="net.charabia.jsmoothgen.ant.JSmoothGen"
		classpath="${dir.jsmooth}/lib/jsmoothgen-ant.jar"/>
		<jsmoothgen project="rtcd.jsmooth"
			skeletonroot="${dir.jsmooth}/skeletons"/>
		<copy file="rtcd_java.exe" todir="${source.examples.scripts}" />

		<delete file="rtcd_java.exe" />

		<delete file="rtcprof.jsmooth" />
		<copy file="rtcprof.jsmooth.in" tofile="rtcprof.jsmooth"/>
		<replace file="rtcprof.jsmooth" token="@version@" 
			value="${version}" />
		<taskdef name="jsmoothgen"
		classname="net.charabia.jsmoothgen.ant.JSmoothGen"
		classpath="${dir.jsmooth}/lib/jsmoothgen-ant.jar"/>
		<jsmoothgen project="rtcprof.jsmooth"
			skeletonroot="${dir.jsmooth}/skeletons"/>
		<copy file="rtcprof_java.exe" todir="${source.examples.scripts}" />
		<delete file="rtcprof_java.exe" />
	</target>

	<target name="javaDoc" description="JavaDocを作成します">

		<delete dir="${build.doc}" />

		<delete dir="${build.doc.jp}" />

		<delete dir="${build.doc.us}" />

		<delete>
			<fileset dir="${util.source}" includes="*.class" />

		</delete>
		<javac srcdir="${util.source}" destdir="${util.source}" 
			encoding="Shift-JIS" />

		<mkdir dir="${build.doc}" />

		<javadoc 
                        Locale="ja_JP"
			packagenames="jp.go.aist.rtm.*,jp.go.aist.rtm.RTC.*,_SDOPackage.*,RTC.*,OpenRTM.*,RTM.*" 
                        sourcepath="${source}" destdir="${build.doc}"

                        encoding="UTF-8"

                        docencoding="UTF-8"

			author="true" doctitle="OpenRTM-aist-Java ${version}" 

			nodeprecated="false" nodeprecatedlist="false" 
                        noindex="false" nonavbar="false" notree="false" 

			package="yes" splitindex="true" 
                        use="true" version="true" charset="UTF-8" 
                        classpath="lib/commons-cli-1.1.jar:lib/jna-4.2.2.jar:lib/jna-platform-4.2.2.jar" 
                        >

                        <taglet name="JaOnTaglet" path="./util"/>
                        <taglet name="EnOffTaglet"  path="./util"/>
                </javadoc>
		<mkdir dir="${build.doc.us}" />

		<javadoc 
                        Locale="en_US"
			packagenames="jp.go.aist.rtm.*,jp.go.aist.rtm.RTC.*,_SDOPackage.*,RTC.*,OpenRTM.*,RTM.*" 
                        sourcepath="${source}" destdir="${build.doc.us}"

                        encoding="UTF-8"

                        docencoding="UTF-8"

			author="true" doctitle="OpenRTM-aist-Java ${version}" 

			nodeprecated="false" nodeprecatedlist="false" 
                        noindex="false" nonavbar="false" notree="false" 

			package="yes" splitindex="true" 
                        use="true" version="true" charset="UTF-8"
                        classpath="lib/commons-cli-1.1.jar:lib/jna-4.2.2.jar:lib/jna-platform-4.2.2.jar" 
                        >
                        <taglet name="EnOnTaglet"  path="./util"/>
                        <taglet name="JaOffTaglet"  path="./util"/>
                </javadoc>
	</target>


	<target name="createVersionFile" description="VersionFileを生成します">
		<exec executable="sed" dir="${source.common}" output="${source.common}/Version.java">
                    <arg line=" -e 's/@OPENRTM_NAME@/${target.name}/g'  -e 's/@OPENRTM_VERSION@/${version}/g' ./Version.java.in">
                    </arg>
		</exec>
	</target>

	<target name="idlCompile" description="IDLファイルをコンパイルします">
		<delete dir="src/_SDOPackage" />
		<delete dir="src/RTC" />
		<delete dir="src/OpenRTM" />
		<delete dir="src/RTM" />

		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.Manager}"/>
		</exec>

		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.OpenRTM}"/>
		</exec>

		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.DataPort}"/>
		</exec>

		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.BasicDataType}"/>
		</exec>

		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.ExtendedDataTypes}"/>
		</exec>

		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.InterfaceDataTypes}"/>
		</exec>

		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.ComponentObserver}"/>
		</exec>

		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.RTC_ComponentObserver}"/>
		</exec>

		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.ExtendedFsmService}"/>
		</exec>

		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.RTC_DataPort}"/>
		</exec>

		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.Logger}"/>
		</exec>

		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.LogicalTimeTriggeredEC}"/>
		</exec>
		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.CameraCommonInterface}"/>
		</exec>
		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.ManipulatorCommonInterface_Common}"/>
		</exec>
		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.ManipulatorCommonInterface_DataTypes}"/>
		</exec>
		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.ManipulatorCommonInterface_Middle}"/>
		</exec>
		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.SharedMemory}"/>
		</exec>
	</target>

	<target name="idlCompileEtc" description="IDLファイル(追加分)をコンパイルします">
		<delete dir="${source.tests.bind}" />

		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source.test} -pkgPrefix CorbaConsumer jp.go.aist.rtm.bind ${idl.test.CorbaConsumer}"/>
		</exec>

		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source.test} -pkgPrefix CorbaPort jp.go.aist.rtm.bind ${idl.test.CorbaPort}"/>
		</exec>

		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source.test} -pkgPrefix TypeCast jp.go.aist.rtm.bind ${idl.test.TypeCast}"/>
		</exec>

		<delete includeEmptyDirs="true">
			<fileset dir="${source.samples.java.SimpleService}" excludes="**.idl,MyServiceConsumer**.java,MyServiceProvider**.java,MyServiceSVC_impl.java,*.conf" />
		</delete>

		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -pkgPrefix SimpleService RTMExamples ${idl.sample}"/>
		</exec>

		<delete includeEmptyDirs="true">
			<fileset dir="${source.samples.java.AutoTest}" excludes="**.idl,AutoTest**.java,MyServiceSVC_impl.java,**.conf" />
		</delete>

		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -pkgPrefix AutoTest RTMExamples ${idl.autotest}"/>
		</exec>
	</target>



	<target name="clean" description="ビルドで生成されたファイルを削除します">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
		<delete dir="docs" />
		<delete includeEmptyDirs="true">
			<fileset dir="${build.dir.test}" includes="**/*.class" />
		</delete>
	</target>



	<target name="compile" description="ソースをコンパイルします(Linux)">
		<mkdir dir="${build.dir}" />
		<javac srcdir="${source.sdo}:${source.rtc}:${source.rtm}:${source.openrtm}:${source.img}:${source.jaraarm}" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar:lib/jna-4.2.2.jar:lib/jna-platform-4.2.2.jar" encoding="UTF-8" />
		<javac srcdir="${source.main}" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar:lib/jna-4.2.2.jar:lib/jna-platform-4.2.2.jar"  encoding="UTF-8" includes="go/aist/**" excludes="go/aist/ForSunOrb/**,go/aist/ForJacOrb/**"/>
		<javac srcdir="${source.rtcd}:${source.rtcprof}" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar:lib/jna-4.2.2.jar:lib/jna-platform-4.2.2.jar"  encoding="UTF-8"/>
		<javac srcdir="${source.extension}:" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar:lib/jna-4.2.2.jar:lib/jna-platform-4.2.2.jar"  encoding="UTF-8" />
		<javac srcdir="${source.examples}:" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar:lib/jna-4.2.2.jar:lib/jna-platform-4.2.2.jar"  encoding="UTF-8" />
	</target>

	<target name="compile_win" description="ソースをコンパイルします(Windows)">
		<mkdir dir="${build.dir}" />

		<native2ascii encoding="UTF-8" src="${source.sdo}" dest="${source.sdotemp}" >

	            <include name="**/*.java" />

	        </native2ascii>

		<copy todir="${source.sdo}">

		    <fileset dir="${source.sdotemp}" >

		        <include name="**/*.java" />

		    </fileset>

		</copy>

		<delete dir="${source.sdotemp}" />

		<native2ascii encoding="UTF-8" src="${source.rtc}" dest="${source.rtctemp}" >

	            <include name="**/*.java" />

	        </native2ascii>

		<copy todir="${source.rtc}">

		    <fileset dir="${source.rtctemp}" >

		        <include name="**/*.java" />

		    </fileset>

		</copy>

		<delete dir="${source.rtctemp}" />

		<native2ascii encoding="UTF-8" src="${source.rtm}" dest="${source.rtmtemp}" >

	            <include name="**/*.java" />

	        </native2ascii>

		<copy todir="${source.rtm}">

		    <fileset dir="${source.rtmtemp}" >

		        <include name="**/*.java" />

		    </fileset>

		</copy>

		<delete dir="${source.rtmtemp}" />

		<native2ascii encoding="UTF-8" src="${source.openrtm}" dest="${source.openrtmtemp}" >

	            <include name="**/*.java" />

	        </native2ascii>

		<copy todir="${source.openrtm}">

		    <fileset dir="${source.openrtmtemp}" >

		        <include name="**/*.java" />

		    </fileset>

		</copy>

		<delete dir="${source.openrtmtemp}" />

		<javac srcdir="${source.sdo}:${source.rtc}:${source.rtm}:${source.openrtm}" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar:lib/jna-4.2.2.jar:lib/jna-platform-4.2.2.jar" encoding="UTF-8" />

		<javac srcdir="${source.main}" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar:lib/jna-4.2.2.jar:lib/jna-platform-4.2.2.jar"  encoding="UTF-8" includes="go/aist/**" excludes="go/aist/ForSunOrb/**,go/aist/ForJacOrb/**"/>

		<javac srcdir="${source.rtcd}:${source.rtcprof}" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar:lib/jna-4.2.2.jar:lib/jna-platform-4.2.2.jar"  encoding="UTF-8"/>

		<javac srcdir="${source.extension}:" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar:lib/jna-4.2.2.jar:lib/jna-platform-4.2.2.jar"  encoding="UTF-8" />

		<delete dir="${source.examplestemp}" />

		<native2ascii encoding="UTF-8" src="${source.examples}" dest="${source.examplestemp}" >

	            <include name="**/*.java" />

	        </native2ascii>

	        <fixcrlf srcdir="${source.examplestemp}" eol="crlf" >

	            <include name="**/*.java" />

	        </fixcrlf>

		<copy todir="${source.examples}">

		    <fileset dir="${source.examplestemp}" >

		        <include name="**/*.java" />

		    </fileset>

		</copy>

		<delete dir="${source.examplestemp}" />

		<javac srcdir="${source.examples}:" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar:lib/jna-4.2.2.jar:lib/jna-platform-4.2.2.jar"  encoding="UTF-8" />

	</target>


	<target name="compile_android" description="ソースをコンパイルします">

		<native2ascii encoding="UTF-8" src="${source.sdo}" dest="${source.sdotemp}" >

	            <include name="**/*.java" />

	        </native2ascii>

		<copy todir="${source.sdo}">

		    <fileset dir="${source.sdotemp}" >

		        <include name="**/*.java" />

		    </fileset>

		</copy>

		<delete dir="${source.sdotemp}" />

		<native2ascii encoding="UTF-8" src="${source.rtc}" dest="${source.rtctemp}" >

	            <include name="**/*.java" />

	        </native2ascii>

		<copy todir="${source.rtc}">

		    <fileset dir="${source.rtctemp}" >

		        <include name="**/*.java" />

		    </fileset>

		</copy>

		<delete dir="${source.rtctemp}" />

		<native2ascii encoding="UTF-8" src="${source.rtm}" dest="${source.rtmtemp}" >

	            <include name="**/*.java" />

	        </native2ascii>

		<copy todir="${source.rtm}">

		    <fileset dir="${source.rtmtemp}" >

		        <include name="**/*.java" />

		    </fileset>

		</copy>

		<delete dir="${source.rtmtemp}" />

		<native2ascii encoding="UTF-8" src="${source.openrtm}" dest="${source.openrtmtemp}" >

	            <include name="**/*.java" />

	        </native2ascii>

		<copy todir="${source.openrtm}">

		    <fileset dir="${source.openrtmtemp}" >

		        <include name="**/*.java" />

		    </fileset>

		</copy>

		<delete dir="${source.openrtmtemp}" />

		<javac srcdir="${source.sdo}:${source.rtc}:${source.rtm}:${source.openrtm}" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar:/usr/local/JacORB/lib/jacorb.jar:lib/jna-4.2.2.jar:lib/jna-platform-4.2.2.jar" encoding="UTF-8" />

		<copy todir="${source.common}" overwrite="true" >

		    <fileset dir="${source.jacorb}" >

		        <include name="**/*.java" />

		    </fileset>

		</copy>

		<javac srcdir="${source.main}:${source.rtcd}:${source.rtcprof}" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar:/usr/local/JacORB/lib/jacorb.jar:lib/jna-4.2.2.jar:lib/jna-platform-4.2.2.jar"  encoding="UTF-8"  includes="go/aist/**"  />

		<delete dir="${source.examplestemp}" />

		<native2ascii encoding="UTF-8" src="${source.examples}" dest="${source.examplestemp}" >

	            <include name="**/*.java" />

	        </native2ascii>

	        <fixcrlf srcdir="${source.examplestemp}" eol="crlf" >

	            <include name="**/*.java" />

	        </fixcrlf>

		<copy todir="${source.examples}">

		    <fileset dir="${source.examplestemp}" >

		        <include name="**/*.java" />

		    </fileset>

		</copy>

		<delete dir="${source.examplestemp}" />

		<copy todir="${source.common}"  overwrite="true">

		    <fileset dir="${source.jacorb}" >

		        <include name="**/*.java" />

		    </fileset>

		</copy>

		<javac srcdir="${source.examples}:" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar:/usr/local/JacORB/lib/jacorb.jarlib/jna-4.2.2.jar:lib/jna-platform-4.2.2.jar:"  encoding="UTF-8"  includes="go/aist/**"  />

	</target>


	<target name="compile_tests" description="テスト用">

		<javac srcdir="${source.sdo}:${source.rtc}:${source.rtm}:${source.openrtm}" destdir="${build.dir.test}" classpath="lib/commons-cli-1.1.jar:lib/jna-4.2.2.jar:lib/jna-platform-4.2.2.jar" encoding="UTF-8" />

		<javac srcdir="${source.main}" destdir="${build.dir.test}" classpath="lib/commons-cli-1.1.jar:lib/jna-4.2.2.jar:lib/jna-platform-4.2.2.jar"  encoding="UTF-8" includes="go/aist/**" excludes="go/aist/ForSunOrb/**,go/aist/ForJacOrb/**"/>
		<native2ascii encoding="UTF-8" src="${source.tests.bind}" dest="${source.tests.bindtemp}" >

	            <include name="**/*.java" />

	        </native2ascii>
		<copy todir="${source.tests.bind}">

		    <fileset dir="${source.tests.bindtemp}" >

		        <include name="**/*.java" />

		    </fileset>

		</copy>

		<delete dir="${source.tests.bindtemp}" />

		<javac srcdir="${source.examples}:${source.extension}:${source.test}:${source.tests.bind}" destdir="${build.dir.test}" classpath="lib/commons-cli-1.1.jar:${env.JUNIT_HOME}/junit.jar:lib/jna-4.2.2.jar:lib/jna-platform-4.2.2.jar" encoding="UTF-8" debug="on"/>


	</target>



	<target name="junit" description="junit ソースをコンパイルします">
		<mkdir dir="${build.dir.test}/reports" />

		<delete dir="${build.dir.test}/reports/*.xml" />

		<delete dir="${build.dir.test}/reports/*.txt" />

		<junit haltonfailure="Yes" >
			<formatter type="xml" usefile="true" />
			<classpath>
				<pathelement path="bin:${env.JUNIT_HOME}/junit:${env.JUNIT_HOME}/junit/samples:${env.JUNIT_HOME}:${env.ANT_HOME}:${build.dir.test}:lib/commons-cli-1.1.jar"/>
				<pathelement location="${env.JUNIT_HOME}/junit.jar"/>
				<pathelement location="${env.ANT_HOME}/lib/ant-junit.jar"/>
			</classpath>
			<test name="jp.go.aist.rtm.RTC.port.ConnectorDataListenerTTests"/>
			<test name="jp.go.aist.rtm.RTC.port.CORBA_CdrSerializeTests"/>
			<test name="jp.go.aist.rtm.RTC.ConfigAdminTest"/>
			<test name="jp.go.aist.rtm.RTC.ConfigTest"/>
			<test name="jp.go.aist.rtm.RTC.CorbaNamingTest"/>
			<test name="jp.go.aist.rtm.RTC.DefaultConfigurationTest"/>
			<test name="jp.go.aist.rtm.RTC.ExtendedFsmServiceProviderTest"/>
			<test name="jp.go.aist.rtm.RTC.ExTrigTest"/>
			<test name="jp.go.aist.rtm.RTC.FactoryTest"/>
			<test name="jp.go.aist.rtm.RTC.ManagerConfigTest"/>
			<test name="jp.go.aist.rtm.RTC.ManagerServantTest"/>
			<test name="jp.go.aist.rtm.RTC.ManagerTest"/>
			<test name="jp.go.aist.rtm.RTC.ModuleManagerTest"/>
			<test name="jp.go.aist.rtm.RTC.NamingManagerTest"/>
			<test name="jp.go.aist.rtm.RTC.NamingOnCorbaTest"/>
			<test name="jp.go.aist.rtm.RTC.NumberingPolicyTests"/>
			<test name="jp.go.aist.rtm.RTC.ObjectManagerTests"/>
			<test name="jp.go.aist.rtm.RTC.PeriodicExecutionContextTests"/>
			<test name="jp.go.aist.rtm.RTC.PeriodicExecutionContextThreadTests"/>
			<test name="jp.go.aist.rtm.RTC.PeriodicTaskTest"/>
			<test name="jp.go.aist.rtm.RTC.RTObjectTest"/>
			<test name="jp.go.aist.rtm.RTC.RTObjectRefTest"/>
			<test name="jp.go.aist.rtm.RTC.SdoConfigurationTest"/>
			<test name="jp.go.aist.rtm.RTC.StateMachineTests"/>
			<test name="jp.go.aist.rtm.RTC.TimeMeasureTest"/>
			<test name="jp.go.aist.rtm.RTC.RTC.ComponentObserverConsumerTest"/>
			<test name="jp.go.aist.rtm.RTC.SDOPackage.SDOOrganizationTest"/>
			<test name="jp.go.aist.rtm.RTC.buffer.NullBufferTest"/>
			<test name="jp.go.aist.rtm.RTC.buffer.RingBufferTest"/>
			<test name="jp.go.aist.rtm.RTC.executionContext.ECFactoryTest"/>
			<test name="jp.go.aist.rtm.RTC.executionContext.ObjectManagerTest"/>
			<test name="jp.go.aist.rtm.RTC.executionContext.ExtTrigExecutionContextTests"/>
			<test name="jp.go.aist.rtm.RTC.executionContext.PeriodicExecutionContextTests"/>
			<test name="jp.go.aist.rtm.RTC.log.LogBufTimeTest"/>
			<test name="jp.go.aist.rtm.RTC.log.LogStreamTest"/>
			<test name="jp.go.aist.rtm.RTC.log.LogbufTest"/>
			<test name="jp.go.aist.rtm.RTC.port.CorbaConsumerTest"/>
			<test name="jp.go.aist.rtm.RTC.port.CorbaPortTest"/>
			<!-- <test name="jp.go.aist.rtm.RTC.port.DataInOutPortTest"/> -->
			<test name="jp.go.aist.rtm.RTC.port.InPortBaseTest"/>
			<test name="jp.go.aist.rtm.RTC.port.InPortCorbaCdrConsumerTest"/>
			<test name="jp.go.aist.rtm.RTC.port.InPortCorbaCdrProviderTest"/>
			<test name="jp.go.aist.rtm.RTC.port.InPortPushConnectorTest"/>
			<test name="jp.go.aist.rtm.RTC.port.InPortPullConnectorTest"/>
			<test name="jp.go.aist.rtm.RTC.port.InPortTest"/>
			<test name="jp.go.aist.rtm.RTC.port.OutPortBaseTest"/>
			<test name="jp.go.aist.rtm.RTC.port.OutPortCorbaCdrProviderTest"/>
			<test name="jp.go.aist.rtm.RTC.port.OutPortCorbaConsumerTest"/>
			<test name="jp.go.aist.rtm.RTC.port.OutPortCorbaProviderTest"/>
			<test name="jp.go.aist.rtm.RTC.port.OutPortProviderImplTest"/>
			<test name="jp.go.aist.rtm.RTC.port.OutPortProviderTest"/>
			<test name="jp.go.aist.rtm.RTC.port.OutPortPushConnectorTest"/>
			<test name="jp.go.aist.rtm.RTC.port.OutPortPullConnectorTest"/>
			<test name="jp.go.aist.rtm.RTC.port.OutPortTest"/>
			<test name="jp.go.aist.rtm.RTC.port.PortAdminTest"/>
			<test name="jp.go.aist.rtm.RTC.port.PortBaseTest"/>
			<test name="jp.go.aist.rtm.RTC.port.PublisherFactoryTests"/>
			<test name="jp.go.aist.rtm.RTC.port.PublisherFlushTests"/>
			<test name="jp.go.aist.rtm.RTC.port.PublisherNewTests"/>
			<test name="jp.go.aist.rtm.RTC.port.PublisherPeriodicTests"/>
			<test name="jp.go.aist.rtm.RTC.util.AdjustedClockTest"/>
			<test name="jp.go.aist.rtm.RTC.util.CORBA_RTCUtilTest"/>
			<test name="jp.go.aist.rtm.RTC.util.CORBA_SeqUtilTest"/>
			<test name="jp.go.aist.rtm.RTC.util.ConnectorProfileFactoryTest"/>
			<test name="jp.go.aist.rtm.RTC.util.DataHolderTest"/>
			<test name="jp.go.aist.rtm.RTC.util.DataRefTest"/>
			<test name="jp.go.aist.rtm.RTC.util.NVUtilTest"/>
			<test name="jp.go.aist.rtm.RTC.util.PortProfileFactoryTest"/>
			<test name="jp.go.aist.rtm.RTC.util.PortServiceListHolderFactoryTest"/>
			<test name="jp.go.aist.rtm.RTC.util.PropertiesTest"/>
			<test name="jp.go.aist.rtm.RTC.util.RTCUtilTests"/>
			<test name="jp.go.aist.rtm.RTC.util.StringUtilTests"/>
			<test name="jp.go.aist.rtm.RTC.util.TimeValueTest"/>
			<test name="jp.go.aist.rtm.RTC.util.TimerTest"/>
			<test name="jp.go.aist.rtm.RTC.util.TypeCastTest"/>
			<!--
			<test name="jp.go.aist.rtm.AllTest110"/>
			-->
			<!--
			<batchtest todir="${build.dir.test}/reports">
				<fileSet dir="${build.dir.test}">
					<include name="jp/go/aist/rtm/RTC/*Tests.class" />
					<include name="jp/go/aist/rtm/RTC/**/*Test.class" />
					<include name="jp/go/aist/rtm/RTC/**/*Tests.class" />
					<exclude name="jp/go/aist/rtm/RTC/SampleTest.class" />
				</fileSet>
			</batchtest>
			-->
			
		</junit>
		<echo>All Test complete!</echo>
	</target>

	<target name="dist" description="ソースをエクスポートします">

		<delete dir="${dist.dir}/source/OpenRTM-aist-Java-${version}" />

		<mkdir dir="${dist.dir}/source/OpenRTM-aist-Java-${version}" />

		<delete file="${dist.dir}/source/OpenRTM-aist-Java-${version}.zip" />

		<copy todir="${dist.dir}/source/OpenRTM-aist-Java-${version}/src" >

			<fileset dir="src" />

		</copy>

<!--
		<copy todir="${dist.dir}/source/OpenRTM-aist-Java-${version}/tests" >

			<fileset dir="tests" />

		</copy>

-->
		<copy todir="${dist.dir}/source/OpenRTM-aist-Java-${version}/idl" >

			<fileset dir="idl" />

		</copy>

		<copy file=".project" todir="${dist.dir}/source/OpenRTM-aist-Java-${version}" />

		<copy file=".classpath" todir="${dist.dir}/source/OpenRTM-aist-Java-${version}" />

		<zip destfile="${dist.dir}/source/OpenRTM-aist-Java-${version}.zip" basedir="${dist.dir}/source/OpenRTM-aist-Java-${version}" />

		<delete dir="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar/OpenRTM-aist/${short_ver}" />

		<mkdir dir="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar/OpenRTM-aist/${short_ver}" />

		<delete file="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar.zip" />

		<copy todir="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar/OpenRTM-aist/${short_ver}/jar" >

			<fileset dir="${dist.dir}">
				<include name="rtcd.jar" />
				<include name="rtcprof.jar" />
				<include name="*${version}.jar" />
				<include name="commons-cli-1.1.jar" />
				<include name="LogicalTimeTriggeredEC.jar" />
				<include name="NameserviceFile.jar" />
				<include name="jna-platform-4.2.2.jar" />
				<include name="jna-4.2.2.jar" />
			</fileset>
      
			<fileset dir="lib">
				<include name="commons-cli-1.1.jar" />
				<include name="jna-platform-4.2.2.jar" />
				<include name="jna-4.2.2.jar" />
			</fileset>

			<fileset dir=".">
			  <include name="License.txt" />
			</fileset>

		</copy>

		<copy todir="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar/OpenRTM-aist/${short_ver}/examples" >

			<fileset dir="${source.examples.scripts}">

				<include name="*.exe" />

				<include name="*.bat" />

				<include name="*.sh" />

				<include name="*.vbs" />

				<include name="*.func" />

			</fileset>

		</copy>

		<copy todir="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar/OpenRTM-aist/${short_ver}/examples/RTMExamples" >
			<fileset dir="${source.samples.class}" />
			<fileset dir="${source.samples.java}" />
		</copy>
		<copy todir="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar/OpenRTM-aist/${short_ver}/examples" >
			<fileset dir="${source.examples}_scripts" />
		</copy>

		<copy todir="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar/OpenRTM-aist/${short_ver}/JavaDoc" >

			<fileset dir="${build.doc}" />

		</copy>

		<copy todir="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar/OpenRTM-aist/${short_ver}/JavaDocEn" >

			<fileset dir="${build.doc.us}" />

		</copy>

		<zip destfile="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar.zip" basedir="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar" />

		<delete file="${dist.dir}/source/OpenRTM-aist-Java-${version}.tar.gz" />

		<tar destfile="${dist.dir}/source/OpenRTM-aist-Java-${version}.tar.gz" 
			basedir="../../" 
			compression="gzip" 
			excludes="OpenRTM-aist-Java/jp.go.aist.rtm.RTC/jcoverage.ser, 
				OpenRTM-aist-Java/jp.go.aist.rtm.RTC/License.*,
				OpenRTM-aist-Java/buildRTC.*, OpenRTM-aist-Java/clean.*, 
				**/*.swp" />


	</target>

</project>


